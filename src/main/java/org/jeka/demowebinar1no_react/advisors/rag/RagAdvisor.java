package org.jeka.demowebinar1no_react.advisors.rag;

import lombok.Builder;
import lombok.Getter;
import org.springframework.ai.chat.client.ChatClientRequest;
import org.springframework.ai.chat.client.ChatClientResponse;
import org.springframework.ai.chat.client.advisor.api.AdvisorChain;
import org.springframework.ai.chat.client.advisor.api.BaseAdvisor;
import org.springframework.ai.chat.prompt.PromptTemplate;
import org.springframework.ai.document.Document;
import org.springframework.ai.vectorstore.SearchRequest;
import org.springframework.ai.vectorstore.VectorStore;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static org.jeka.demowebinar1no_react.advisors.expension.ExpansionQueryAdvisor.ENRICHED_QUESTION;

@Builder
public class RagAdvisor implements BaseAdvisor {

    @Builder.Default
    private static final PromptTemplate template = PromptTemplate.builder().template("""
            –¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —è–ø–æ–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–æ–ª–ª—ã –∏ —Å–µ—Ç—ã –∏–∑ –º–µ–Ω—é.
                        
            –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –≥–æ—Å—Ç—é –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–ª—é–¥–æ –ø–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å—É, –≤–∫—É—Å—É, –¥–∏–µ—Ç–µ –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
                        
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            1. –ì–æ–≤–æ—Ä–∏ –≤–µ–∂–ª–∏–≤–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.
            2. –í –æ—Ç–≤–µ—Ç–µ —É–ø–æ–º–∏–Ω–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω—É, –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫.
            3. –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –≤–∏–∑—É–∞–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—Ç—å –±–ª—é–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üç£, ü•ë, üêâ, üç§).
            4. –ï—Å–ª–∏ –±–ª—é–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –≤—ã–≤–µ–¥–∏ –∏—Ö —Å–ø–∏—Å–∫–æ–º, –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º.
            5. –í –∫–æ–Ω—Ü–µ –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.
            6. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π ID, JSON –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ.
            7. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (—Ä–æ–ª–ª—ã, —Å–µ—Ç—ã, –Ω–∞–ø–∏—Ç–∫–∏, —Å–æ—É—Å—ã). –ù–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –º–µ–Ω—é.
                        
            –ü—Ä–∏–º–µ—Ä:
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ö–∞–∫–∏–µ —Ä–æ–ª–ª—ã –±–µ–∑ —Ä—ã–±—ã?"
            –û—Ç–≤–µ—Ç:
            "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∫—É—Å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±–µ–∑ —Ä—ã–±—ã:
            üçÄ –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π —Ä–æ–ª–ª ‚Äî —Å–≤–µ–∂–∏–π –∏ –ª—ë–≥–∫–∏–π, —Å –∞–≤–æ–∫–∞–¥–æ, –æ–≥—É—Ä—Ü–æ–º –∏ —Å–ª–∏–≤–æ—á–Ω—ã–º —Å—ã—Ä–æ–º. 320 ‚ÇΩ –∑–∞ 8 —à—Ç (210 –≥).
            üêâ –î—Ä–∞–∫–æ–Ω —Ä–æ–ª–ª ‚Äî —Å –∫—Ä–µ–≤–µ—Ç–∫–æ–π —Ç–µ–º–ø—É—Ä–∞, –∞–≤–æ–∫–∞–¥–æ –∏ —Å—ã—Ä–æ–º. 480 ‚ÇΩ –∑–∞ 8 —à—Ç (230 –≥).
            –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø–æ–¥–æ–±—Ä–∞–ª–∞ —á—Ç–æ-—Ç–æ –æ—Å—Ç—Ä–æ–µ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç ‚Äî –º—è–≥–∫–æ–µ –ø–æ –≤–∫—É—Å—É?"
            
            CONTEXT: {context}
            Question: {question}
            """).build();



    private VectorStore vectorStore;

    @Builder.Default
    private SearchRequest searchRequest = SearchRequest.builder().topK(5).similarityThreshold(0.62).build();

    @Getter
    private final int order;

    public static RagAdvisorBuilder build(VectorStore vectorStore) {
        return new RagAdvisorBuilder().vectorStore(vectorStore);
    }

    @Override
    public ChatClientRequest before(ChatClientRequest chatClientRequest, AdvisorChain advisorChain) {
        String originalUserQuestion = chatClientRequest.prompt().getUserMessage().getText();
        String queryToRag = chatClientRequest.context().getOrDefault(ENRICHED_QUESTION, originalUserQuestion).toString();

        List<Document> documents = vectorStore
                .similaritySearch(SearchRequest.from(searchRequest).query(queryToRag)
                .topK(searchRequest.getTopK()*2)
                .build());

        if (documents == null || documents.isEmpty()) {
            return chatClientRequest.mutate().context("CONTEXT","–¢–£–¢ –ü–£–°–¢–û - –Ω–∏ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –º–æ—è —Å–æ–±–∞—á–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞").build();
        }

        BM25RerankEngine rerankEngine = BM25RerankEngine.builder().build();

//        documents = rerankEngine.rerank(documents,queryToRag,searchRequest.getTopK());




        String llmContext = documents.stream().map(Document::getText).collect(Collectors.joining(System.lineSeparator()));

        String finalUserPrompt = template.render(
                Map.of("context", llmContext, "question", originalUserQuestion)
        );


        return chatClientRequest.mutate().prompt(chatClientRequest.prompt().augmentUserMessage(finalUserPrompt)).build();
    }

    @Override
    public ChatClientResponse after(ChatClientResponse chatClientResponse, AdvisorChain advisorChain) {
        return chatClientResponse;
    }


}